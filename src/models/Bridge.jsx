/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Conrad Justin (https://sketchfab.com/ConradJustin)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/baker-and-the-bridge-da3f6e7b85ed44b7aa8bb5571e365abc
Title: Baker and the Bridge
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from '@react-spring/three';

import bridgeScene from '../assets/bridge/public/baker_and_the_bridge.glb';

const Bridge = ({ isRotating, setIsRotating, setCurrentStage, ...props }) => {
    const bridgeRef = useRef();

    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(bridgeScene);

    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95;

    const handlePointerDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(true);

        const clientX = e.touches
            ? e.touches[0].clientX
            : e.clientX;

        lastX.current = clientX;
    }
    const handlePointerUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(false);
    }
    const handlePointerMove = (e) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating) {
            const clientX = e.touches
                ? e.touches[0].clientX
                : e.clientX;

            const delta = (clientX - lastX.current) / viewport.width;

            bridgeRef.current.rotation.y += delta * 0.01 * Math.PI;
            lastX.current = clientX;
            rotationSpeed.current = delta * 0.01 * Math.PI;
        }
    }
    const handleKeyDown = (e) => {
        if (e.key === 'ArrowLeft') {
            if (!isRotating) setIsRotating(true);
            bridgeRef.current.rotation.y += 0.01 * Math.PI;
        } else if (e.key === 'ArrowRight') {
            if (!isRotating) setIsRotating(true);
            bridgeRef.current.rotation.y -= 0.01 * Math.PI;
        }
    }
    const handleKeyUp = (e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
            setIsRotating(false);
        }
    }

    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor;

            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }

            bridgeRef.current.rotation.y += rotationSpeed.current;
        } else {
            const rotation = bridgeRef.current.rotation.y;

            const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                    setCurrentStage(4);
                    break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                    setCurrentStage(3);
                    break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                    setCurrentStage(2);
                    break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                    setCurrentStage(1);
                    break;
                default:
                    setCurrentStage(null);
            }
        }
    });

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlePointerDown);
        canvas.addEventListener('pointerup', handlePointerUp);
        canvas.addEventListener('pointermove', handlePointerMove);
        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);

        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown);
            canvas.removeEventListener('pointerup', handlePointerUp);
            canvas.removeEventListener('pointermove', handlePointerMove);
            document.removeEventListener('keydown', handleKeyDown);
            document.removeEventListener('keyup', handleKeyUp);
        }
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

    return (
        <a.group {...props} ref={bridgeRef}>
            <a.group rotation={[Math.PI / 2, 0, -Math.PI]}>
                <a.group rotation={[-Math.PI, 0, 0]} scale={0.01}>
                    <a.group rotation={[0, 0, -Math.PI / 2]} scale={100}>
                        <mesh
                            geometry={nodes.characters_STONE_a_0.geometry}
                            material={materials.STONE_a}
                        />
                        <mesh
                            geometry={nodes.characters_STONE_a_0_1.geometry}
                            material={materials.STONE_a}
                        />
                    </a.group>
                    <a.group rotation={[0, 0, -Math.PI / 2]} scale={100}>
                        <mesh
                            geometry={nodes.characters007_bush_0.geometry}
                            material={materials.bush}
                        />
                        <mesh
                            geometry={nodes.characters007_bush_0_1.geometry}
                            material={materials.bush}
                        />
                    </a.group>
                    <mesh
                        geometry={nodes.characters001_charcters_0.geometry}
                        material={materials.charcters}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                    <mesh
                        geometry={nodes.characters002_watermill_0.geometry}
                        material={materials.watermill}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                    <mesh
                        geometry={nodes.characters003_terrain_left_0.geometry}
                        material={materials.terrain_left}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                    <mesh
                        geometry={nodes.characters004_house_0.geometry}
                        material={materials.house}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                    <mesh
                        geometry={nodes.characters005_bridge_0.geometry}
                        material={materials.bridge}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                    <mesh
                        geometry={nodes.characters006_tree_0.geometry}
                        material={materials.tree}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                    <mesh
                        geometry={nodes.characters008_water_0.geometry}
                        material={materials.water}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                    <mesh
                        geometry={nodes.characters009_terrain_right_0.geometry}
                        material={materials.terrain_right}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                    <mesh
                        geometry={nodes.characters010_wheat_0.geometry}
                        material={materials.wheat}
                        rotation={[0, 0, -Math.PI / 2]}
                        scale={100}
                    />
                </a.group>
            </a.group>
        </a.group>
    );
}

export default Bridge;